const API_KEY = "f3d56a9a93d3db457dfd32f11af18c9d",
  BASE_URL = "https://api.openweathermap.org/data/2.5/onecall",
  GET_PLACE = "http://api.openweathermap.org/geo/1.0/reverse",
  ICON_URL = "http://openweathermap.org/img/w/";
let form = null,
  latitute = null,
  longitute = null;
const getLocation = () => {
    navigator.geolocation
      ? navigator.geolocation.getCurrentPosition(setPosition)
      : alert("Geolocation is not supported by this browser.");
  },
  setPosition = (e) => {
    (latitute.value = e.coords.latitude),
      (longitute.value = e.coords.longitude);
  };
window.onload = () => {
  (form = document.getElementById("weather-form")),
    (latitute = document.getElementById("lat")),
    (longitute = document.getElementById("lang")),
    navigator.geolocation
      ? navigator.geolocation.getCurrentPosition(setPosition)
      : alert("Geolocation is not supported by this browser."),
    form && form.addEventListener("submit", (e) => validatate(e));
};
const validatateEmptyAndNumeric = (e) => {
    let t = e.value;
    return "string" == typeof t && 0 == t.trim().length
      ? (e.setAttribute("class", "form-control is-invalid"),
        console.log(e.nextElementSibling),
        (e.nextElementSibling.innerHTML = "Value not allowed to be empty"),
        !1)
      : (Number(t) === t && t % 1 == 0) || (Number(t) === t && t % 1 != 0)
      ? (e.setAttribute("class", "form-control is-invalid"),
        console.log(e.nextElementSibling),
        (e.nextElementSibling.innerHTML = "Value must be a numeric value"),
        !1)
      : (e.setAttribute("class", "form-control"),
        (e.nextElementSibling.innerHTML = ""),
        !0);
  },
  validateLatitude = (e) => {
    let t = parseInt(e.value);
    return isFinite(t) && Math.abs(t) <= 90
      ? (e.setAttribute("class", "form-control"),
        (e.nextElementSibling.innerHTML = ""),
        !0)
      : (e.setAttribute("class", "form-control  is-invalid"),
        (e.nextElementSibling.innerHTML =
          "Invalid latitude value value not greater then 90 and less then -90"),
        !1);
  },
  validateLongitude = (e) => {
    let t = parseInt(e.value);
    return isFinite(t) && Math.abs(t) <= 180
      ? ((e.nextElementSibling.innerHTML = ""),
        e.setAttribute("class", "form-control"),
        !0)
      : (e.setAttribute("class", "form-control  is-invalid"),
        (e.nextElementSibling.innerHTML =
          "Invalid latitude value value not greater then 180 and less then -180"),
        !1);
  },
  validatate = (e) => {
    e.preventDefault(),
      validatateEmptyAndNumeric(latitute) &&
        validatateEmptyAndNumeric(longitute) &&
        validateLatitude(latitute) &&
        validateLongitude(longitute) &&
        callAjax(latitute.value, longitute.value);
  },
  getCity = (e, t) => {
    fetch(`${GET_PLACE}?lat=${e}&lon=${t}&appid=${API_KEY}`)
      .then((e) => e.json())
      .then((n) => {
        let i = Array.isArray(n) ? n[0].name : "-";
        fetchWeather(e, t, i);
      })
      .catch((n) => {
        console.log(n),
          alert("There is no city attach to this location"),
          fetchWeather(e, t, "");
      });
  },
  callAjax = (e, t) => {
    "string" == typeof e && (e = e.trim()),
      "string" == typeof t && (t = t.trim());
    let n = document.getElementById("button");
    n.setAttribute("disable", !0), (n.innerText = "Sending..."), getCity(e, t);
  },
  fetchWeather = (e, t, n) => {
    fetch(
      `${BASE_URL}?lat=${e}&lon=${t}&appid=${API_KEY}&exclude=minutely,hourly&units=metric`
    )
      .then((e) => e.json())
      .then((e) => {
        button.removeAttribute("disable"),
          (button.innerText = "Submit"),
          document.getElementById("current-result") &&
            document.getElementById("week-result") &&
            ((document.getElementById("current-result").innerHTML = ""),
            (document.getElementById("week-result").innerHTML = ""),
            (document.getElementById(
              "current-result"
            ).innerHTML = renderCurrentWeather({
              city: n,
              weatherType:
                e.current.weather && Array.isArray(e.current.weather)
                  ? e.current.weather[0].description
                  : "",
              weatherIcon:
                e.current.weather && Array.isArray(e.current.weather)
                  ? e.current.weather[0].icon
                  : "",
              temp: `${Math.round(e.current.temp)}°C`,
              dateTime: new Date(1e3 * e.current.dt),
            })),
            e.daily.map((t) => {
              if (e.current.temp != t.dt) {
                let e = {
                  weatherType:
                    t.weather && Array.isArray(t.weather)
                      ? t.weather[0].description
                      : "",
                  weatherIcon:
                    t.weather && Array.isArray(t.weather)
                      ? t.weather[0].icon
                      : "",
                  temp: `${Math.round(t.temp.day)}°C`,
                  dateTime: new Date(1e3 * t.dt).toLocaleString("en-us", {
                    weekday: "long",
                  }),
                };
                document.getElementById(
                  "week-result"
                ).innerHTML += renderWeekWeather(e);
              }
            }));
      })
      .catch((e) => {
        console.log(e),
          button.removeAttribute("disable"),
          (button.innerText = "Submit"),
          alert("Something went wrong wrong while fetching data");
      });
  },
  renderCurrentWeather = (e) => {
    let t = e.dateTime.toLocaleString("en-us", { weekday: "long" }),
      n = e.dateTime.toLocaleString("en-us", {
        year: "numeric",
        month: "long",
        day: "2-digit",
      });
    return `<div class="col">\n  <div class="display-4">${e.city}</div>\n  <div class="display-7">${t}</div>\n  <div class="display-8">${n}</div>\n\n  \n  <div class ="display-7">${e.weatherType} <img title="${e.weatherType}" src="${ICON_URL}${e.weatherIcon}.png"/></div>\n  <div class="display-5">${e.temp}</div>\n \n  </div>`;
  },
  renderWeekWeather = (e) =>
    `<div class="col">\n  <div class="text-center">\n  <div class="display-7">${e.dateTime}</div>\n\n  <img title="${e.weatherType}" src="${ICON_URL}${e.weatherIcon}.png"/>\n  <div class="display-7">${e.temp}</div>\n  </div>\n  </div>`;
